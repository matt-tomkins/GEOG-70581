install.packages("bookdown")
bookdown::gitbook()
```{r}
rep(0.1, 7)
# Function to check and install packages
check.packages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# Checks and installs packages
packages <- c("ggplot2")
check.packages(packages)
# Load data (actual file path)
df <- read.csv("C:/Users/44797/Desktop/Repo/GEOG-70581/data/flow_data.csv")
# Load data (actual file path)
df <- read.csv("C:/Users/44797/Desktop/Repo/GEOG-70581/data/flow_data.csv")
# Converts dates (in character format) to date format
df$date <- as.Date(df$date, format =  "%d/%m/%Y")
# Subsets post-2000 daily flow measurements
df_post_2000 <- subset(df, date >= as.Date("2000-01-01"))
View(df_post_2000)
# Average post-2000 daily flow
average_flow <- mean(df_post_2000$flow)
#
df_post_2000$deviation <- df_post_2000$flow - average_flow
View(df_post_2000)
g <- ggplot(data = df_post_2000, mapping=aes(x=date, y=deviation)) +
geom_line(colour = "#56ACFF") +
geom_point(colour = "#767676") +
theme_classic() +
theme(aspect.ratio = 1)
g
g <- ggplot(data = df_post_2000, mapping=aes(x=date, y=deviation)) +
geom_line(colour = "#56ACFF") +
geom_point(colour = "#767676") +
theme_classic() +
geom_smooth(method = "lm")
theme(aspect.ratio = 1)
g
df$year <- format(as.Date(df_post_2000$date, format="%d/%m/%Y"),"%Y")
df_post_2000$year <- format(as.Date(df_post_2000$date, format="%d/%m/%Y"),"%Y")
View(df_post_2000)
# Assigning to a variable
g <- ggplot(data = df_post_2000, mapping=aes(x=date, y=flow)) +
geom_line(colour = "#56ACFF") +
geom_point(colour = "#767676") +
theme_classic() +
geom_smooth(method = "lm")
theme(aspect.ratio = 1)
g <- ggplot(data = df_post_2000, mapping=aes(x=date, y=flow)) +
geom_line(colour = "#56ACFF") +
geom_point(colour = "#767676") +
theme_classic() +
geom_smooth(method = "lm")
theme(aspect.ratio = 1)
g
df_post2000 <- subset(df, date >= as.Date("2000-01-01") & date < as.Date("2010-01-01"))
df_pre2000 <- subset(df, date >= as.Date("1990-01-01") & date < as.Date("2000-01-01"))
View(df_pre2000)
View(df_post2000)
# Average post-2000 daily flow
average_flow <- mean(df_post2000$flow)
average_flow <- mean(df_pre2000$flow)
# Create a new column, corresponding to the month of the measurement
df$month <- months(df_post2000$date)
# Create a new column, corresponding to the month of the measurement
df_post2000$month <- months(df_post2000$date)
View(df_post2000)
# Summarise by month
summary <- aggregate(df_post2000$flow, df_post2000$month, mean)
# Summarise by month
summary <- aggregate(df_post2000$flow, list(df_post2000$month), mean)
View(summary)
View(df_post2000)
aggregate(month ~ flow, df_post2000, mean)
aggregate(flow ~ month, df_post2000, mean)
View(summary)
g <- ggplot(data = summary, mapping=aes(x=month, y=flow)) +
geom_bar() +
theme_classic() +
theme(aspect.ratio = 1)
g
View(summary)
# Summarise by month
summary <- aggregate(flow ~ month, df_post2000, mean)
View(summary)
# Assigning to a variable
g <- ggplot(data = summary, mapping=aes(x=month, y=flow)) +
geom_bar() +
theme_classic() +
theme(aspect.ratio = 1)
g
# Assigning to a variable
g <- ggplot(data = summary, mapping=aes(x=month, y=flow)) +
geom_bar(stat="identity") +
theme_classic() +
theme(aspect.ratio = 1)
g
# # Converts dates (in character format) to date format
summary$month <- as.Date(summary$month, format =  "%m")
View(summary)
# Summarise by month
summary <- aggregate(flow ~ month, df_post2000, mean)
# Converts dates (in character format) to date format
df$date <- as.Date(df$date, format =  "%d/%m/%Y")
# Extracts post 2000 river flow
df_post2000 <- subset(df, date >= as.Date("2000-01-01"))
# Create a new column, corresponding to the month of the measurement
df_post2000$month <- months(df_post2000$date)
View(df_post2000)
# # Converts dates (in character format) to date format
summary$month <- factor(summary$month, levels = month.name)
View(summary)
# Assigning to a variable
g <- ggplot(data = summary, mapping=aes(x=month, y=flow)) +
geom_bar(stat="identity") +
theme_classic() +
theme(aspect.ratio = 1)
g
g <- ggplot(data = summary, mapping=aes(x=month, y=flow)) +
geom_bar(stat="identity") +
theme_classic()
g
g <- ggplot(data = summary, mapping=aes(x=month, y=flow)) +
geom_bar(stat="identity") +
theme_classic() +
labs(x = "Month (2000 - 2019)", y = bquote('Average daily flow'~(m^3)~'per second')) +
scale_y_continuous(expand = c(0,0))
g
# # Converts dates (in character format) to date format
summary$month <- factor(summary$month, levels = month.abb)
View(summary)
# # Converts dates (in character format) to date format
summary$month <- factor(summary$month, levels = month.name)
# Assigning to a variable
g <- ggplot(data = summary, mapping=aes(x=month, y=flow)) +
geom_bar(stat="identity") +
theme_classic() +
labs(x = "Month (2000 - 2019)", y = bquote('Average daily flow'~(m^3)~'per second')) +
scale_y_continuous(expand = c(0,0))
g
summary <- aggregate(flow ~ month, df_post2000, mean)
# # Converts dates (in character format) to date format
summary$month <- factor(summary$month, levels = month.name)
# Assigning to a variable
g <- ggplot(data = summary, mapping=aes(x=month, y=flow)) +
geom_bar(stat="identity") +
theme_classic() +
labs(x = "Month (2000 - 2019)", y = bquote('Average daily flow'~(m^3)~'per second')) +
scale_y_continuous(expand = c(0,0))
g
g <- ggplot(data = summary, mapping=aes(x=month, y=flow)) +
geom_bar(stat="identity") +
theme_classic() +
labs(x = "Month (2000 - 2019)", y = bquote('Average daily flow'~(m^3)~'per second')) +
scale_y_continuous(expand = c(0,0)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
g
g <- ggplot(data = summary, mapping=aes(x=month, y=flow)) +
geom_bar(stat="identity") +
theme_classic() +
labs(x = "Month (2000 - 2019)", y = bquote('Average daily flow'~(m^3)~'per second')) +
scale_y_continuous(expand = c(0,0)) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
g
g <- ggplot(data = summary, mapping=aes(x=month, y=flow)) +
geom_bar(stat="identity") +
theme_classic() +
labs(x = "Month (2000 - 2019)", y = bquote('Average daily flow'~(m^3)~'per second')) +
scale_y_continuous(expand = c(0,0)) +
theme(axis.text.x = element_text(angle = 135, vjust = 0.5, hjust=1))
g
# Assigning to a variable
g <- ggplot(data = summary, mapping=aes(x=month, y=flow)) +
geom_bar(stat="identity") +
theme_classic() +
labs(x = "Month (2000 - 2019)", y = bquote('Average daily flow'~(m^3)~'per second')) +
scale_y_continuous(expand = c(0,0)) +
coord_flip()
g
g <- ggplot(data = summary, mapping=aes(x=month, y=flow)) +
geom_bar(stat="identity") +
theme_classic() +
labs(x = "Month (2000 - 2019)", y = bquote('Average daily flow'~(m^3)~'per second')) +
scale_y_continuous(expand = c(0,0))
g
summary <- aggregate(flow ~ month, df_post2000, sd)
View(summary)
summary <- aggregate(flow ~ month, df_post2000, var)
View(summary)
# Summarise by month
summary <- aggregate(flow ~ month, df_post2000, mean)
# Converts dates (in character format) to date format
summary$month <- factor(summary$month, levels = month.name)
# Assigning to a variable
g <- ggplot(data = summary, mapping=aes(x=month, y=flow)) +
geom_bar(colour = "#3EBBFB", stat="identity") +
theme_classic() +
labs(x = "Month (2000 - 2019)", y = bquote('Average daily flow'~(m^3)~'per second')) +
scale_y_continuous(expand = c(0,0))
g
g <- ggplot(data = summary, mapping=aes(x=month, y=flow)) +
geom_bar(colour = "#3EBBFB", stat="identity") +
theme_classic() +
labs(x = "Month (2000 - 2019)", y = bquote('Average daily flow'~(m^3~'per second)'))) +
scale_y_continuous(expand = c(0,0))
g
g <- ggplot(data = summary, mapping=aes(x=month, y=flow)) +
geom_bar(fill = "#3EBBFB", stat="identity") +
theme_classic() +
labs(x = "Month (2000 - 2019)", y = bquote('Average daily flow'~(m^3~'per second)'))) +
scale_y_continuous(expand = c(0,0))
g
g <- ggplot(data = summary, mapping=aes(x=month, y=flow)) +
geom_bar(fill = "#3EBBFB", stat="identity") +
theme_classic() +
labs(x = "Month (2000 - 2019)", y = bquote('Average daily flow'~(m^3~'per second)'))) +
scale_y_continuous(expand = c(0,0)) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
g
g <- ggplot(data = summary, mapping=aes(x=month, y=flow)) +
geom_bar(fill = "#3EBBFB", stat="identity") +
theme_classic() +
labs(x = "Month (2000 - 2019)", y = bquote('Average daily flow'~(m^3~'per second)'))) +
scale_y_continuous(expand = c(0,0)) +
theme(axis.text.x = element_text(angle = 45, vjust = 0.5, hjust=1))
g
g <- ggplot(data = summary, mapping=aes(x=month, y=flow)) +
geom_bar(fill = "#3EBBFB", stat="identity") +
theme_classic() +
labs(x = "Month (2000 - 2019)", y = bquote('Average daily flow'~(m^3~'per second)'))) +
scale_y_continuous(expand = c(0,0)) +
theme(axis.text.x = element_text(angle = 45, vjust = 0, hjust=1))
g
g <- ggplot(data = summary, mapping=aes(x=month, y=flow)) +
geom_bar(fill = "#3EBBFB", stat="identity") +
theme_classic() +
labs(x = "Month (2000 - 2019)", y = bquote('Average daily flow'~(m^3~'per second)'))) +
scale_y_continuous(expand = c(0,0)) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
g
View(summary)
summary$month[max(summary$flow)]
max(summary$flow)
View(summary)
# Summarise by month, using the aggregate() function and 'mean'
summary <- aggregate(flow ~ month, df_post2000, mean)
# Converts dates (in character format) to date format
summary$month <- factor(summary$month, levels = month.name)
View(summary)
# Summarise by month, using the aggregate() function and 'mean'
summary <- aggregate(flow ~ month, df_post2000, mean)
View(summary)
summary$month[max(summary$flow)]
# Summarise by month, using the aggregate() function and 'mean'
summary <- aggregate(flow ~ month, df_post2000, mean)
View(summary)
max(summary$flow)
summary$month[summary$flow == max(summary$flow)]
print(paste0("The month with the highest average daily flow is", summary$month[summary$flow == max(summary$flow)]))
print(paste0("The month with the lowest average daily flow is", summary$month[summary$flow == min(summary$flow)]))
print(paste0("The month with the highest average daily flow is", summary$month[summary$flow == max(summary$flow)]), sep = ' ')
print(paste0("The month with the lowest average daily flow is", summary$month[summary$flow == min(summary$flow)]), sep = ' ')
print(paste0("The month with the highest average daily flow is", summary$month[summary$flow == max(summary$flow)]), sep = "")
print(paste0("The month with the highest average daily flow is", summary$month[summary$flow == max(summary$flow)]), sep = " ")
print(paste0("The month with the highest average daily flow is ", summary$month[summary$flow == max(summary$flow)]))
print(paste0("The month with the lowest average daily flow is ", summary$month[summary$flow == min(summary$flow)]))
# Load data from csv
df <- read.csv("C:/Users/44797/Desktop/Repo/GEOG-70581/data/flow_data.csv")
# Convert dates (in character format) to date format
df$date <- as.Date(df$date, format =  "%d/%m/%Y")
# Extracts post-2000 river flow
df_post2000 <- subset(df, date >= as.Date("2000-01-01"))
# Create a new column, corresponding to the month of measurement, using the months() function
df_post2000$month <- months(df_post2000$date)
View(df_post2000)
# Summarise by month, using the aggregate() function and 'mean'
summary <- aggregate(flow ~ month, df_post2000, mean)
View(summary)
p <- ggplot() +
layer_spatial(mersey_accumulation, aes(fill = stat(band1))) + # Adds raster layer
geom_sf(data = seed_points, shape = 21, fill = "#FFFFFF", colour = "black", size = 3) + # Adds vector layer
theme_classic() +
labs(fill = "Log-transformed flow accumulation value", x = "Easting", y = "Northing") +
scale_fill_continuous(type = "viridis",  na.value = NA) +
theme(legend.position = "top")
# Plots using ggplot
p <- ggplot() +
layer_spatial(mersey_land_cover, aes(fill = stat(band1))) + # Adds raster layer
#annotation_spatial(data = snapped_seed_points, shape = 21, fill = "#FB5858", colour = "black", size = 3) + # Adds snapped seeds layer
theme_classic() +
labs(x = "Easting", y = "Northing") +
#scale_fill_continuous(type = "viridis",  na.value = NA) +
scale_fill_distiller(palette = "RdYlBu", na.value = NA) +
theme(legend.position = "top")
p
warnings()
whitebox()
library(rmarkdown)
detach("package:rmarkdown", unload = TRUE)
**Note**: the relevant chapters will be made available as we progress through the semester, hence why Practicals 2 and the assessment information are not currently visible. Practical 2 will be released prior to the Week 10 lecture.
remove.packages("rmarkdown", lib="~/R/win-library/4.0")
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
# Clean the previous bookdown version
# Function to check and install packages
check.packages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# Checks and installs packages
packages <- c("bookdown", "markdown")
check.packages(packages)
# Clean the docs folder
clean_book(clean = getOption("bookdown.clean_book", TRUE))
# Function to check and install packages
check.packages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# Checks and installs packages
packages <- c("ggplot2", "ggspatial", "here", "raster", "sf", "whitebox", # Practical-1
"data.table", "dplyr", "forcats", "MASS", "units", "patchwork", "leaflet", "gridExtra", "rgdal") # Practical-2
check.packages(packages)
# Function to check and install packages
check.packages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# Checks and installs packages
packages <- c("ggplot2", "ggspatial", "here", "raster", "sf", "whitebox", # Practical-1
"data.table", "dplyr", "forcats", "MASS", "units", "patchwork", "leaflet",
"gridExtra", "rgdal") # Practical-2
check.packages(packages)
# Clean the previous bookdown version
# Function to check and install packages
check.packages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# Checks and installs packages
packages <- c("bookdown", "markdown", "Rtools")
check.packages(packages)
# Clean the docs folder
clean_book(clean = getOption("bookdown.clean_book", TRUE))
# Clean the previous bookdown version
# Function to check and install packages
check.packages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
# Checks and installs packages
#packages <- c("bookdown", "markdown")
#check.packages(packages)
install.packages("bookdown")
install.packages("markdown")
check.packages(bookdown)
install.packages("markdown")
install.packages("bookdown")
check.packages(bookdown)
# Labelling
content <- paste(sep = "<br/>",
"<b><a>Catchment Outlet (~160 m)</a></b>",
"Upper Eskdale",
"Western Lake District"
)
# Read using sf
eskdale_watershed_polygons <- st_read(here("output", "practical_1", "eskdale_watershed.shp"))
# Loads land cover raster using the raster and here packages
mersey_land_cover <- raster(here("output", "practical_2", "mersey_LC_reclass.tif"))
library(raster)
# Loads land cover raster using the raster and here packages
mersey_land_cover <- raster(here("output", "practical_2", "mersey_LC_reclass.tif"))
library(raster)
library(here)
library(ggplot2)
library(ggspatial)
# Loads land cover raster using the raster and here packages
mersey_land_cover <- raster(here("output", "practical_2", "mersey_LC_reclass.tif"))
# Manually defined colours for land cover categories
# (1=Arable, 2=Heath, 3=Grassland, 4=Urban, 5=Wetland)
colours <- c("1" = "#D1F5D8",
"2" = "#87C292",
"3" = "#498955",
"4" = "#FFA888",
"5" = "#4575B4")
# Plots using ggplot
p <- ggplot() +
layer_spatial(mersey_land_cover, aes(fill = factor(after_stat(band1)))) + # Adds raster layer
theme_classic() +
labs(fill = "Land cover class", x = "Easting", y = "Northing") +
scale_fill_manual(values = colours, na.value = NA) + # Updated fill aesthetic
theme(legend.position = "top")
p
library(raster)
library(here)
library(ggplot2)
library(ggspatial)
# Loads land cover raster using the raster and here packages
mersey_land_cover <- raster(here("output", "practical_2", "mersey_LC_reclass.tif"))
# Manually defined colours for land cover categories
# (1=Arable, 2=Heath, 3=Grassland, 4=Urban, 5=Wetland)
colours <- c("1" = "#D1F5D8",
"2" = "#87C292",
"3" = "#498955",
"4" = "#FFA888",
"5" = "#4575B4")
# Plots using ggplot
p <- ggplot() +
layer_spatial(mersey_land_cover, aes(fill = after_stat(band1))) + # Adds raster layer
theme_classic() +
labs(fill = "Land cover class", x = "Easting", y = "Northing") +
scale_fill_manual(values = colours, na.value = NA) + # Updated fill aesthetic
theme(legend.position = "top")
p
library(raster)
library(here)
library(ggplot2)
library(ggspatial)
# Loads land cover raster using the raster and here packages
mersey_land_cover <- raster(here("output", "practical_2", "mersey_LC_reclass.tif"))
# Manually defined colours for land cover categories
# (1=Arable, 2=Heath, 3=Grassland, 4=Urban, 5=Wetland)
colours <- c("1" = "#D1F5D8",
"2" = "#87C292",
"3" = "#498955",
"4" = "#FFA888",
"5" = "#4575B4")
plot(mersey_land_cover)
# Plots using ggplot
#p <- ggplot() +
#layer_spatial(mersey_land_cover, aes(fill = factor(after_stat(band1)))) + # Adds raster layer
#theme_classic() +
#labs(fill = "Land cover class", x = "Easting", y = "Northing") +
#scale_fill_manual(values = colours, na.value = NA) + # Updated fill aesthetic
#theme(legend.position = "top")
#p
library(raster)
library(here)
library(ggplot2)
library(ggspatial)
# Loads land cover raster using the raster and here packages
mersey_land_cover <- raster(here("output", "practical_2", "mersey_LC_reclass.tif"))
# Manually defined colours for land cover categories
# (1=Arable, 2=Heath, 3=Grassland, 4=Urban, 5=Wetland)
colours <- c("1" = "#D1F5D8",
"2" = "#87C292",
"3" = "#498955",
"4" = "#FFA888",
"5" = "#4575B4")
# Plots using ggplot
p <- ggplot() +
layer_spatial(mersey_land_cover, aes(fill = factor(after_stat(band1)))) + # Adds raster layer
theme_classic() +
labs(fill = "Land cover class", x = "Easting", y = "Northing") +
#scale_fill_manual(values = colours, na.value = NA) + # Updated fill aesthetic
theme(legend.position = "top")
p
library(raster)
library(here)
library(ggplot2)
library(ggspatial)
# Loads land cover raster using the raster and here packages
mersey_land_cover <- raster(here("output", "practical_2", "mersey_LC_reclass.tif"))
# Manually defined colours for land cover categories
# (1=Arable, 2=Heath, 3=Grassland, 4=Urban, 5=Wetland)
colours <- c("Arable" = "#D1F5D8",
"Heath" = "#87C292",
"Grassland" = "#498955",
"Urban" = "#FFA888",
"Wetland" = "#4575B4")
# Plots using ggplot
p <- ggplot() +
layer_spatial(mersey_land_cover, aes(fill = factor(after_stat(band1)))) + # Adds raster layer
theme_classic() +
labs(fill = "Land cover class", x = "Easting", y = "Northing") +
scale_fill_manual(values = colours, na.value = NA) + # Updated fill aesthetic
theme(legend.position = "top")
p
